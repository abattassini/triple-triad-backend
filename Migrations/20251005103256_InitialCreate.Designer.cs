// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TripleTriadApi.Data;

#nullable disable

namespace TripleTriadApi.Migrations
{
    [DbContext(typeof(TripleTriadContext))]
    [Migration("20251005103256_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TripleTriadApi.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BottomValue")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 1, 10 });

                    b.Property<string>("Element")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("LeftValue")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 1, 10 });

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RightValue")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 1, 10 });

                    b.Property<int>("TopValue")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 1, 10 });

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("TripleTriadApi.Models.CardPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("X")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 0, 2 });

                    b.Property<int>("Y")
                        .HasColumnType("integer")
                        .HasAnnotation("Range", new[] { 0, 2 });

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchId", "X", "Y")
                        .IsUnique();

                    b.ToTable("CardPlacements");
                });

            modelBuilder.Entity("TripleTriadApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentPlayerTurn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Player1Id")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Player1Score")
                        .HasColumnType("integer");

                    b.Property<string>("Player2Id")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Player2Score")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("WinnerId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("Player1Id", "Player2Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TripleTriadApi.Models.PlayerHand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchId", "PlayerId", "CardId")
                        .IsUnique();

                    b.ToTable("PlayerHands");
                });

            modelBuilder.Entity("TripleTriadApi.Models.CardPlacement", b =>
                {
                    b.HasOne("TripleTriadApi.Models.Card", "Card")
                        .WithMany("CardPlacements")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TripleTriadApi.Models.Match", "Match")
                        .WithMany("CardPlacements")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("TripleTriadApi.Models.PlayerHand", b =>
                {
                    b.HasOne("TripleTriadApi.Models.Card", "Card")
                        .WithMany("PlayerHands")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TripleTriadApi.Models.Match", "Match")
                        .WithMany("PlayerHands")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("TripleTriadApi.Models.Card", b =>
                {
                    b.Navigation("CardPlacements");

                    b.Navigation("PlayerHands");
                });

            modelBuilder.Entity("TripleTriadApi.Models.Match", b =>
                {
                    b.Navigation("CardPlacements");

                    b.Navigation("PlayerHands");
                });
#pragma warning restore 612, 618
        }
    }
}
